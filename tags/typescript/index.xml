<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>typescript on Profe Pato</title>
        <link>https://profepato.vasak.net.ar/tags/typescript/</link>
        <description>Recent content in typescript on Profe Pato</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>es-AR</language>
        <lastBuildDate>Fri, 17 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://profepato.vasak.net.ar/tags/typescript/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>¿Que es TypeScript? ¿En que se parece a JavaScript?</title>
        <link>https://profepato.vasak.net.ar/post/que-es-typescript-en-que-se-parece-a-javascript/</link>
        <pubDate>Fri, 17 Mar 2023 00:00:00 +0000</pubDate>
        
        <guid>https://profepato.vasak.net.ar/post/que-es-typescript-en-que-se-parece-a-javascript/</guid>
        <description>&lt;img src="https://i.postimg.cc/4dwcTKQ5/tsvsjs.png" alt="Featured image of post ¿Que es TypeScript? ¿En que se parece a JavaScript?" /&gt;&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt; es un &lt;em&gt;subconjunto azúcar sintáctico&lt;/em&gt; de &lt;strong&gt;JavaScript&lt;/strong&gt;. Básicamente es un código que &lt;em&gt;transpila&lt;/em&gt; a &lt;strong&gt;JavaScript&lt;/strong&gt; y tiene como fin formalizar un poco los lineamientos a la hora de desarrollar con este lenguaje.&lt;/p&gt;
&lt;h2 id=&#34;video&#34;&gt;Video&lt;/h2&gt;
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/2mXT2VKqhgQ&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;principales-diferencias&#34;&gt;Principales diferencias&lt;/h2&gt;
&lt;p&gt;Podemos situar grandes diferencias entre estos lenguajes pero para eso debemos entender que al momento de ejecución ambos terminan siendo &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Objetos&lt;/strong&gt;: Si bien en &lt;strong&gt;JavaScript&lt;/strong&gt; podemos usar objetos y clases no son su mayor fuerte, sin embargo en &lt;strong&gt;TypeScript&lt;/strong&gt; vamos a estar programando Orientado a Objetos y este puede ser un punto fuerte para elegir, si lo que vamos a estar haciendo va a ser en &lt;em&gt;POO&lt;/em&gt; &lt;strong&gt;TypeScript&lt;/strong&gt; es una gran opción.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compilación&lt;/strong&gt;: Mientras que &lt;strong&gt;JavaScript&lt;/strong&gt; es interpretado &lt;strong&gt;TypeScript&lt;/strong&gt; requiere un proceso de &lt;em&gt;“compilación”&lt;/em&gt; (o mejor dicho &lt;em&gt;transpilación&lt;/em&gt;) donde el código de &lt;strong&gt;TypeScript&lt;/strong&gt; se convierte en código &lt;strong&gt;JavaScript&lt;/strong&gt; que luego será interpretado ya sea por el servidor o el cliente.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tipado&lt;/strong&gt;: Una de las flexibilidades más grandes de &lt;strong&gt;JavaScript&lt;/strong&gt; es su tipado dinámico, sin embargo en &lt;strong&gt;TypeScript&lt;/strong&gt; vamos a tener un tipado estático y fuerte (que para ser sinceros podemos flexibilizar sin problemas) pero esto nos permite disminuir la cantidad de errores en tiempo de ejecución por el tipado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Curva de Aprendizaje&lt;/strong&gt;: Si bien &lt;strong&gt;TypeScript&lt;/strong&gt; es un subconjunto &lt;em&gt;azúcar sintáctico&lt;/em&gt; de &lt;strong&gt;JavaScript&lt;/strong&gt; este es un poco más complejo de aprender, según la comunidad, que &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cual-elegir&#34;&gt;¿Cual Elegir?&lt;/h2&gt;
&lt;p&gt;Es difícil poder definir cuál es la mejor opción sin tener un contexto. Siempre la mejor opción va a depender de nuestro expertis en cada uno, las necesidades del proyecto y los &lt;em&gt;framework&lt;/em&gt; que vamos a estar utilizando. De todas formas a las diferencias que marcamos arriba voy a sumar, una serie de reglas que utilizo yo para definir, estas son solo en base a mi experiencia:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Tamaño del proyecto&lt;/em&gt;, si el proyecto es pequeño y rápido, bastará con usar &lt;strong&gt;JavaScript&lt;/strong&gt;, sin embargo en proyectos medianos y grandes &lt;strong&gt;TypeScript&lt;/strong&gt; puede ser más cómodo a largo plazo y ahorrar algunos dolores de cabeza.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cantidad de miembros&lt;/em&gt;, si vamos a estar desarrollando nosotros solos &lt;strong&gt;JavaScript&lt;/strong&gt; puede resultar más práctico, pero si tenemos como objetivo que colaboren más personas &lt;strong&gt;TypeScript&lt;/strong&gt; puede ser muy bueno para manejar lineamientos similares y tener código más fácil de entender.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Compatibilidad&lt;/em&gt;, puede que &lt;strong&gt;TypeScript&lt;/strong&gt; no sea compatible con nuestro proyecto o la forma de encararlo, es una prueba interesante para tener en cuenta a la hora de elegirlo.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
